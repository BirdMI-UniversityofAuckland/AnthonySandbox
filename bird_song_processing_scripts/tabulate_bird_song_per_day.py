import os
import re
import datetime
import json
import matplotlib.pyplot as plt
import seaborn

"""
This script searches subdirectories from the folder it was run from for instances
of bird song as generated by Sound Analysis Pro (SAP) and builds a JSON file
for each bird found for each day found tabulating the number of songs a bird produced
per hour
"""


def get_immediate_subdirectories(dir):
    return [name for name in os.listdir(dir)
            if os.path.isdir(os.path.join(dir, name))]

def find_bird_directories(sub_dirs):
    for dir in sub_dirs:
        if re.match('[W \d]', dir) is None:
            sub_dirs.remove(dir)
    return sub_dirs

def get_file_names_in_dir(dir):
    return [name for name in os.listdir(dir)
        if not os.path.isdir(os.path.join(dir, name))]

def extract_time_stamp_from_regex(regex_time_data):
    time_data = regex_time_data.group()
    time_data = time_data.split('_')
    time_data = time_data[1:]
    time_data = [int(t) for t in time_data]
    try:
        year, month, day, hour, minute, seconds = 2016, time_data[0], time_data[1], time_data[2], time_data[3], time_data[4] 
        time_stamp = datetime.datetime(year, month, day, hour, minute, seconds)
    except:
        print year, month, day, hour, minute
    
    return time_stamp


def generate_time_stamps(bird_song_file_names):
    time_stamps = []
    for f_name in bird_song_files_names:
        if re.search('.wav', f_name) is not None:
            time_data = re.search('_\d+_\d+_\d+_\d+_\d+',f_name)
            if time_data is not None:
                time_stamp = extract_time_stamp_from_regex(time_data)
                time_stamps.append(time_stamp)
    time_stamps.sort()                
    return time_stamps

def bucket_time_stamps(time_stamps):
    # Takes a sorted date time list
    # Assume the day is the same across the data set

    delta_t = datetime.timedelta(minutes = 60)
    format = "%Y-%m-%d %H:%M:%S %Z"
    calls_per_bucket = {}

    year, month, day, start_hour = time_stamps[0].year, time_stamps[0].month, time_stamps[0].day, time_stamps[0].hour 


    current_time_bucket = datetime.datetime(year, month, day, start_hour)
    

    for stamp in time_stamps:
        
        if stamp - current_time_bucket > delta_t:
            while stamp - current_time_bucket > delta_t:
                current_time_bucket += delta_t 
        
        current_time_bucket_string = current_time_bucket.strftime(format)        

        if current_time_bucket_string in calls_per_bucket:
            
            calls_per_bucket[current_time_bucket_string] += 1
        else:
            calls_per_bucket[current_time_bucket_string] = 1

    return calls_per_bucket

def split_call_buckets(calls_per_bucket):
    
    calls_bucket_pair = []

    for key, value in calls_per_bucket.items():
        calls_bucket_pair.append((key, value))
    
    calls_bucket_pair = sorted(calls_bucket_pair, key = lambda x:x[0])

    buckets = []
    calls_per_bucket = []

    for pair in calls_bucket_pair:
        buckets.append(pair[0])
        calls_per_bucket.append(pair[1])
    
    return buckets, calls_per_bucket 

def save_bird_call_data(data_dict):

    with open("bird_song_data.json",'w') as out_file:
        json.dump(data_dict, out_file, indent = 4)

def plot_calls_over_day(buckets, calls_per_bucket):

    plt.plot(buckets, calls_per_bucket)
    plt.show()

if __name__=="main":

    bird_day_data_dict  = {}

    sub_dirs = get_immediate_subdirectories(".")    
    bird_dirs = find_bird_directories(sub_dirs)

    for dir in bird_dirs:
        bird_song_dirs =  get_immediate_subdirectories("./"+dir)

        for b_dir in bird_song_dirs:

            bird_song_dir = "./" + dir + "/" + b_dir

            bird_song_files_names = get_file_names_in_dir(bird_song_dir)
            time_stamps = generate_time_stamps(bird_song_files_names)
            calls_per_bucket = bucket_time_stamps(time_stamps)

            key_time = time_stamps[0]
            key =  dir + "-" + str(key_time.year) + "-" + str(key_time.month) + "-" + str(key_time.day) 
            bird_day_data_dict[key] = calls_per_bucket


    save_bird_call_data(bird_day_data_dict)



